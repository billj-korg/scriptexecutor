#!/bin/sh

#
#	modwave Updater Script executed at start - this is a special version for installing
#	via the sciptexecute image itself.
#
#	The tarball for the update will be under /etc here in this update's root filesystem.
#	

RootfsMountPoint=/rootfs
BootMountPoint=$RootfsMountPoint/boot
KorgMountPoint=$RootfsMountPoint/Korg
EmmcBootPartition=/dev/mmcblk0p1
EmmcRootFsPartition=/dev/mmcblk0p2
EmmcKorgPartition=/dev/mmcblk0p3
UpdateContentPath=/etc/updatecontent

#----------------------------------------------------------
# ReEnableNormalBoot()
#----------------------------------------------------------
ReEnableNormalBoot()
{
	# ensure we reboot from the normal partition the next time around.
	echo "mounting boot partition"
	mkdir /boot
	mount /dev/mmcblk0p1 /boot 
	# double check in case the filesystem is slow to come up.
	# 	If it doesn't come up on the 3rd try, that's bad news.
	if [ ! -f /boot/config.txt ]; then
		sleep 2
		mount /dev/mmcblk0p1 /boot
		echo "waited two seconds for the EMMC"
		if [ ! -f /boot/config.txt ]; then
			sleep 4
			mount /dev/mmcblk0p1 /boot
			echo "waited four more seconds for the EMMC"
			if [ ! -f /boot/config.txt ]; then
				sleep 4
				mount /dev/mmcblk0p1 /boot
				echo "waited four more seconds even for the EMMC"
			fi
		fi
	fi
    echo "changing config.txt"
    cp /boot/config.txt /tmp/config.txt
    sed -i s/initramfs\ updater-scriptexecute.img/#initramfs\ updater-scriptexecute.img/ /tmp/config.txt
    sed -i s/kernel=\"updater-kernel/#kernel=\"updater-kernel/ /tmp/config.txt
    sync
    mv /tmp/config.txt /boot/config.txt
    sync
}

#----------------------------------------------------------
# RestartSystem()
#----------------------------------------------------------
RestartSystem()
{
	echo "preparing to reboot" >> /boot/updatelog
	sync
	reboot
}

#----------------------------------------------------------
# CheckUpdaterFiles()
#	takes one argument. $1 = UpdatePath
#----------------------------------------------------------
CheckUpdaterFiles()
{
	InstallInfoFile=$1/install.info
	if [ -e $InstallInfoFile ]; then
		while read filename md5checksum
		do
			if [ "$filename" != "VERSION" ] && [ "$filename" != "TIME_EST" ]; then
				echo "$filename" " : " "$md5checksum"
				fileToCheck=$1/$filename
				echo "checking $fileToCheck..." > /boot/updatelog
				calculatedMd5=`md5sum $fileToCheck | awk '{print $1}'`
				if [ "$calculatedMd5" != "$md5checksum" ]; then
					echo "$filename checksum failure" >> /boot/updatelog
					RestartSystem
				fi
			fi
		done < "$InstallInfoFile"
	else
		echo "install.info file in $1 not found." >> /boot/updatelog
		RestartSystem
	fi
}


#----------------------------------------------------------
# Main body of the script
#----------------------------------------------------------
case "$1" in
  start)

	# restore boot partition for normal boot
	# Are there any conditions in which it makes more sense to wait to do this?
	# Assuming not, we immediately update the boot partition such that it will boot normally
	#	the next time the system is rebooted (either by power cycle, or the end of this process).
	sleep 3
	ReEnableNormalBoot

	#make mount point directories and mount the emmc partition(s) to the mount point(s)
	mkdir -p $RootfsMountPoint
	mount $EmmcRootFsPartition $RootfsMountPoint
		# check return code to make sure the mount succeeded
		retVal=$?
		if [ $retVal -ne 0 ]; then
		    echo "Failed to mount the rootfs partition." > /boot/updatelog
		fi
	mkdir -p $BootMountPoint
	mount $EmmcBootPartition $BootMountPoint
		# check return code to make sure the mount succeeded
		retVal=$?
		if [ $retVal -ne 0 ]; then
		    echo "Failed to mount the boot partition within the rootfs mount point." >> /boot/updatelog
		fi
	mkdir -p $KorgMountPoint
	mount $EmmcKorgPartition $KorgMountPoint
		# check return code to make sure the mount succeeded
		retVal=$?
		if [ $retVal -ne 0 ]; then
		    echo "Failed to mount the Korg partition within the rootfs mount point." >> /boot/updatelog
		fi

	# read install.info from that path, verify checksums of files contained in the 
	#	install.info file (TODO: do sanity check of size requirements?)
	echo "about to check updater files." >> /boot/updatelog
	CheckUpdaterFiles $UpdateContentPath
	echo "done checking updater files." >> /boot/updatelog

	# run pretar.sh
	if [ -e $UpdateContentPath/pretar.sh ]; then
		echo "running pretar." >> /boot/updatelog
		sh $UpdateContentPath/pretar.sh > $RootfsMountPoint/errOutput1 2>&1
		sh $UpdateContentPath/pretar.sh
		echo "ran pretar." >> /boot/updatelog
	fi

	# untar the files
	if [ -e $UpdateContentPath/rootfs.tgz ]; then
		# how to do the big tar here. Can we do a progress bar?
		echo "executing tar xvf $UpdateContentPath/rootfs.tgz -C $RootfsMountPoint" >> /boot/updatelog
		tar xvf $UpdateContentPath/rootfs.tgz -C $RootfsMountPoint
	fi

	# run posttar.sh
	if [ -e $UpdateContentPath/posttar.sh ]; then
		echo "running posttar." >> /boot/updatelog
		sh $UpdateContentPath/posttar.sh > $RootfsMountPoint/errOutput2 2>&1
		sh $UpdateContentPath/posttar.sh
		echo "ran posttar." >> /boot/updatelog
	fi

	# reboot.
	RestartSystem
    ;;

  stop)
	;;
  *)
	echo "Usage: $0 {start|stop}"
	exit 1
esac

exit $?
